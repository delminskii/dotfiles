snippet "^advent(ofcode)?" "AdventOfCode Template" r
#!/usr/bin/env python3
import operator
import string
import re
import math
from collections import Counter, defaultdict, deque
from functools import reduce
from pathlib import Path


def	part1(contents):
	pass


def	part2(contents):
	pass

if __name__ == "__main__":
	contents = Path("input.txt").read_text().strip()
	part1(contents)
	part2(contents)
endsnippet


snippet "^main" "def main with __main__" r
#!/usr/bin/env python3


def main():
	${0:pass}


if __name__ == "__main__":
	main()
endsnippet


snippet c "class-scoped private variable name"
cls._${0:var}
endsnippet


snippet "^dc" "dataclass decorator with slots set" r
@dataclass(slots=True)

endsnippet


snippet "^datac?" "import dataclass related things" r
from dataclasses import astuple, dataclass, field, fields
from enum import Enum

${0}
endsnippet


snippet "^baseimp?" "import base modules" r
import re
import json
import logging
import operator
from contextlib import suppress
from pathlib import Path
import operator
import httpx

${0}
endsnippet


snippet cd "_log.debug"
cls._log.debug("${0}")
endsnippet


snippet ci "_log.info"
cls._log.info("${0}")
endsnippet


snippet "head(aj)?" "browser-like headers" r
`!p
from json import dumps
d = {
	"Accept": "*/*",
	"Accept-Encoding": "gzip, deflate",
	"Accept-Language": "en-US,en;q=0.5",
	"Cache-Control": "no-cache",
	"Connection": "keep-alive",
	"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
}
if match.group(1): d.update({"X-Requested-With": "XMLHttpRequest"})
snip.rv = "headers = %s" % dumps(d, indent=4).replace('"', "'")`
endsnippet


snippet p "prints message"
print(f"\{${0}\}")
endsnippet


snippet "p(\*+)" "prints delimeter" r
`!p snip.rv = "print('*' * %d)" % (len(match.group(1)) * 10)`
endsnippet


snippet br "break"
break
endsnippet


snippet log "logging"
import logging
logging.getLogger("<some logger name>").propagate = False
logging.basicConfig(
	format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
	level=logging.DEBUG
)
log = logging.getLogger(__name__)
endsnippet


snippet l "make a list"
list(${VISUAL})
endsnippet

snippet p= "print variable with it's name & value (py3.10 adhoc)" A
`!p
indent = ' ' * int(vim.eval('indent(".")'))
pieces = filter(len, map(str.strip, snip.v.text.split('\n')))
pieces = (
	'%sprint(f"%s: {%s}")' % (indent if i else '', p, p)
	for i, p in enumerate(pieces)
)
snip.rv = '\n'.join(pieces).rstrip()`
endsnippet

snippet "(cur|this)?dir" "current directory" r
THIS_DIR = Path(__file__).parent

endsnippet


snippet "bs(4)?back" "define BS4 backend" r
BS4_BACKEND = "html.parser"
try:
	import lxml

	BS4_BACKEND = "lxml"
except (ImportError, ModuleNotFoundError):
	pass

endsnippet


snippet aw
await ${1}
endsnippet

snippet n
None
endsnippet


snippet ifok "if response.ok:"
if response.ok:
	${0}
endsnippet

snippet ifs "if response.is_success:"
if response.is_success:
	${0}
endsnippet

snippet mks
`!p
indent = ' ' * int(vim.eval('indent(".")'))
pieces = filter(len, map(str.strip, snip.v.text.strip().split('\n')))
pieces = (
	"%s%s: str = str()" % (indent if i else '', p)
	for i, p in enumerate(pieces)
)
snip.rv = '\n'.join(pieces).rstrip()`
endsnippet
