snippet "^advent(ofcode)?" "AdventOfCode Template" r
#!/usr/bin/env python3
import operator
import re
import math
from collections import Counter, defaultdict, deque
from pathlib import Path


def	part1(contents):
	pass


def	part2(contents):
	pass

if __name__ == "__main__":
	# contents = Path("input.txt").read_text().strip()

	contents = Path("input_sample.txt").read_text().strip()

	part1(contents)
	part2(contents)
endsnippet

snippet "^main" "def main with __main__" r
#!/usr/bin/env python3


def main():
	${0:pass}


if __name__ == "__main__":
	main()
endsnippet

snippet "^datac?" "import dataclass related things" r
from dataclasses import astuple, dataclass, field
from enum import Enum
from typing import List

${0}
endsnippet

snippet "^baseimp?" "import base modules" r
import csv
import re
import json
from pathlib import Path
from typing import List, Dict, Tuple, Iterator, Optional
import requests

${0}
endsnippet

snippet cd "_log.debug"
cls._log.debug("${0}")
endsnippet

snippet ci "_log.info"
cls._log.info("${0}")
endsnippet


snippet "head(aj)?" "browser-like headers" r
`!p
from json import dumps
d = {
	"Accept": "*/*",
	"Accept-Encoding": "gzip, deflate, br",
	"Accept-Language": "en-US,en;q=0.5",
	"Cache-Control": "no-cache",
	"Connection": "keep-alive",
	"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0"
}
if match.group(1): d.update({"X-Requested-With": "XMLHttpRequest"})
snip.rv = "headers = %s" % dumps(d, indent=4).replace('"', "'")`
endsnippet


snippet p "prints message"
print(f"{${0}}")
endsnippet

snippet br "break"
break
endsnippet

snippet "p(\*){1,3}" "prints delimeter" r
`!p
snip.rv = "print('*' * %d)" % (match.string.count('*') * 10)`
endsnippet


snippet log "logging"
import logging
logging.getLogger("<some logger name>").propagate = False
logFormatter = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
logging.basicConfig(format=logFormatter, level=logging.DEBUG)
log = logging.getLogger(__name__)
endsnippet


snippet l "make list"
list(${VISUAL})
endsnippet

snippet pe "print variable with it's name & value"
print(f"value={value}")
endsnippet


snippet "(cur|this)?dir" "current directory" r
THIS_DIR = Path(__file__).parent

endsnippet


snippet "bs(4)?back" "define BS4 backend" r
BS4_BACKEND = "html.parser"
try:
	import lxml

	BS4_BACKEND = "lxml"
except (ImportError, ModuleNotFoundError):
	pass

endsnippet


snippet aw
await ${1}
endsnippet


snippet ifok "if response.ok:"
if response.ok:
	${0}
endsnippet


snippet mks
`!p
pieces = map(str.strip, snip.v.text.strip().split("\n"))
lines = map(lambda p: "%s: str = str()" % p, pieces)
snip.rv = "\n".join(lines).strip()`

endsnippet


snippet wcsv "writes out csv file"
with ${1:output_filename}.open("w", newline="") as fp:
	writer = csv.writer(fp)
	writer.writerow(header)
	writer.writerows(output_rows)
endsnippet


snippet wjson "writes out json file"
with ${1:output_filename}.open("w") as fp:
	json.dump(${2:data}, fp, indent=4)
endsnippet
